# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt
snippet newCli
cli, err := client.GetNewClient()
if err != nil {
	return ${1}
}
defer cli.Close()
endsnippet

snippet newWcli
wcli, err := w3.Dial(client.RPCAddr)
if err != nil {
	t.Fatal(err)
}
defer wcli.Close()
endsnippet

snippet newSim "Simulates a transaction" b
var resp sim.Response
msg, err := (&w3types.Message{}).SetTx(${1}, transaction.SignerForDecoding)
if err != nil {
	return err
}
err = wcli.Call(
	sim.Simulate(
		[]*w3types.Message{
			msg,
		},
		nil,
		nil,
		nil,
		nil,
		false,
	).Returns(&resp),
)
if err != nil {
	return err
}
endsnippet

snippet newAction "Create a new action" b
var ${1} = &cobra.Command{
	Use:  "${1}",
	Args: cobra.ExactArgs(1),
	RunE: func(_ *cobra.Command, args []string) error {
		${2}
	},
}
endsnippet

snippet gofunc "Parallelize" b
type order struct {
	${1}
}
wg := sync.WaitGroup{}
chanOrder := make(chan *order)
defer close(chanOrder)

chanResult := make(chan *PairWithVolume)
defer close(chanResult)

chanErr := make(chan error)

wg.Add(len(hvps))
var results []*${2}

for i := 0; i < runtime.NumCPU(); i++ {
	go func() {
		for {
			order, ok := <-chanOrder
				if !ok {
					return
				}

			wg.Done()
		}
	}()
}
go func() {
	defer close(chanErr)
	for _, o := range ${3} {
		chanOrder <- ${4}
	}
}()
go func() {
	for r := range chanResult {
		if r == nil {
			wg.Done()
			continue
		}
		results = append(results, r)
		wg.Done()
	}
}()
for err := range chanErr {
	if err != nil {
		return nil, err
	}
}
wg.Wait()
endsnippet

snippet dlp "dl.Println" b
dl.Println("${1}")
endsnippet

snippet errr "a.RenderError from err" b
if err != nil {
	a.RenderErrorGin(c, err)
	return
}

endsnippet

snippet bindgin "Bind parameters to gin struct"
p := new(${1})
err := c.Bind(&p)
if err != nil {
	a.RenderErrorGin(c, err)
	return
}

endsnippet

snippet rendererr "a.RenderError from err" b
if err != nil {
	a.RenderError(err, w, r)
	return
}

endsnippet

snippet errc "Error nil or continue"
if err != nil {
	fmt.Println(err)
	continue
}

endsnippet

snippet nb "New big.Int"
new(big.Int).
endsnippet
